[{"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/index.js":"1","/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/App.js":"2","/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/reportWebVitals.js":"3","/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/Market.js":"4","/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/addToStorage.js":"5"},{"size":500,"mtime":1640425865000,"results":"6","hashOfConfig":"7"},{"size":149,"mtime":1640425865000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1640425865000,"results":"9","hashOfConfig":"7"},{"size":5462,"mtime":1640425865000,"results":"10","hashOfConfig":"7"},{"size":526,"mtime":1640425865000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t6f5v9",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/index.js",[],"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/App.js",[],"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/reportWebVitals.js",[],"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/Market.js",["23","24","25"],"import { useEffect, useState } from \"react\";\nimport { addJsonToStorage, addFileToStorage } from \"./addToStorage\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nconst Minter = (props) => {\n  const [status, setStatus] = useState(\"Status\");\n  const [images, setImages] = useState([]);\n  const [json, setJSON] = useState([]);\n  const [csv, setCSV] = useState([]);\n  const [gencsv, setGencsv] = useState(false);\n\n  async function getfile(file) {\n    return await new Response(file).json();\n  }\n\n  async function uploadMetadata() {\n    setStatus(\"Uploading...\");\n    try {\n      const imagesArr = images;\n      const jsonFileArr = json;\n      const jsonArr = [];\n\n      imagesArr.sort((a, b) => a.name.localeCompare(b.name));\n      jsonFileArr.sort((a, b) => a.name.localeCompare(b.name));\n\n      const jsonUrls = [];\n      for (var file of jsonFileArr) {\n        jsonArr.push(await getfile(file));\n      }\n\n      for (var i = 0; i < jsonArr.length; i++) {\n        setStatus(`Uploading...${i + 1} of ${jsonArr.length}`);\n\n        const added = await addJsonToStorage(jsonArr[i], imagesArr[i]);\n        jsonUrls.push(added.url);\n      }\n      setStatus(\"Upload complete\");\n      console.log(jsonUrls);\n      setCSV([jsonUrls]);\n      setGencsv(true);\n    } catch (err) {\n      setStatus(`Error: ${err}`);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Upload NFT Metadata</h1>\n      <h3> Select Images: </h3>\n      <input\n        type=\"file\"\n        multiple\n        onChange={(e) => {\n          setImages(Array.from(e.target.files));\n        }}\n      />\n      <h3> Select JSON files: </h3>\n      <input\n        type=\"file\"\n        multiple\n        onChange={(e) => {\n          setJSON(Array.from(e.target.files));\n        }}\n      />\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <button onClick={uploadMetadata}>\n        <b>Upload</b>\n      </button>\n      <br/>\n      <br/>\n      {gencsv && <CSVLink data={csv} target=\"_blank\">Download CSV</CSVLink>  }\n\n      <div style={{ position: \"fixed\", top: \"90vh\", color: \"green\" }}>\n        {status}\n      </div>\n\n      {/* <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Token Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Address\"\n                value={tokenAddress}\n                onChange={(event) => setTokenAddress(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Mint To : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Address\"\n                value={mintTo}\n                onChange={(event) => setMintTo(event.target.value)}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Images: </h3>\n              <input\n                type=\"file\"\n                multiple\n                onChange={(e) => {\n                  setImages(Array.from(e.target.files));\n                }}\n              />\n            </td>\n            <td>\n              <h3> JSON files: </h3>\n              <input\n                type=\"file\"\n                multiple\n                onChange={(e) => {\n                  setJSON(Array.from(e.target.files));\n                }}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={onMintPressed}>\n                <b>Mint NFT</b>\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <h3> CSV file: </h3>\n              <input\n                type=\"file\"\n                onChange={(e) => {\n                  setCSV(e.target.files[0]);\n                }}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={(e) => onMintCSV()}>\n                <b>Mint NFT from CSV</b>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <h2> Transfer : </h2>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Token Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Token Address\"\n                value={tokenAddress2}\n                onChange={(event) => setTokenAddress2(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Token Id : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"tokenID\"\n                value={tokenId}\n                onChange={(event) => setTokenId(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Receiver Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Receiver Address\"\n                value={receiverAddress}\n                onChange={(event) => setReceiverAddress(event.target.value)}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={transferAsTokenOwner}>\n                Transfer as token owner\n              </button>\n            </td>\n            <td>\n              <button onClick={transferAsContractOwner}>\n                Transfer as contract owner\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p id=\"status\" style={{ color: \"limegreen\" }}>\n        {status}\n      </p> */}\n    </div>\n  );\n};\n\nexport default Minter;\n","/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/addToStorage.js",[],{"ruleId":"26","severity":1,"message":"27","line":1,"column":10,"nodeType":"28","messageId":"29","endLine":1,"endColumn":19},{"ruleId":"26","severity":1,"message":"30","line":2,"column":28,"nodeType":"28","messageId":"29","endLine":2,"endColumn":44},{"ruleId":"26","severity":1,"message":"31","line":3,"column":19,"nodeType":"28","messageId":"29","endLine":3,"endColumn":30},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'addFileToStorage' is defined but never used.","'CSVDownload' is defined but never used."]