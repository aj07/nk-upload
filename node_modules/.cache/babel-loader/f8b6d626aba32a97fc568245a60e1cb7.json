{"ast":null,"code":"var _jsxFileName = \"/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/Market.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { addJsonToStorage, addFileToStorage } from \"./addToStorage\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  const [status, setStatus] = useState(\"Status\");\n  const [images, setImages] = useState([]);\n  const [json, setJSON] = useState([]);\n  const [csv, setCSV] = useState([]);\n  const [gencsv, setGencsv] = useState(false);\n\n  async function getfile(file) {\n    return await new Response(file).json();\n  }\n\n  async function uploadMetadata() {\n    setStatus(\"Uploading...\");\n\n    try {\n      const imagesArr = images;\n      const jsonFileArr = json;\n      const jsonArr = [];\n      imagesArr.sort((a, b) => a.name.localeCompare(b.name));\n      jsonFileArr.sort((a, b) => a.name.localeCompare(b.name));\n      const jsonUrls = [];\n\n      for (var file of jsonFileArr) {\n        jsonArr.push(await getfile(file));\n      }\n\n      for (var i = 0; i < jsonArr.length; i++) {\n        setStatus(`Uploading...${i + 1} of ${jsonArr.length}`);\n        const added = await addJsonToStorage(jsonArr[i], imagesArr[i]);\n        jsonUrls.push(added.url);\n      }\n\n      setStatus(\"Upload complete\");\n      console.log(jsonUrls);\n      setCSV([jsonUrls]);\n      setGencsv(true);\n    } catch (err) {\n      setStatus(`Error: ${err}`);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload NFT Metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Select Images: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: e => {\n        setImages(Array.from(e.target.files));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Select JSON files: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: e => {\n        setJSON(Array.from(e.target.files));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadMetadata,\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), gencsv && /*#__PURE__*/_jsxDEV(CSVLink, {\n      data: csv,\n      target: \"_blank\",\n      children: \"Download CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90vh\",\n        color: \"green\"\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"Yy1x/koEigby+i4WnWXl9zPGvnI=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/home/ankit/pandora/hitansh/Hitansh-wrokgroup/Hitansh-wrokgroup-nft_storage_upload/src/Market.js"],"names":["useEffect","useState","addJsonToStorage","addFileToStorage","CSVLink","CSVDownload","Minter","props","status","setStatus","images","setImages","json","setJSON","csv","setCSV","gencsv","setGencsv","getfile","file","Response","uploadMetadata","imagesArr","jsonFileArr","jsonArr","sort","a","b","name","localeCompare","jsonUrls","push","i","length","added","url","console","log","err","e","Array","from","target","files","position","top","color"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,gBAAnD;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,WAArC;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,QAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;;AAEA,iBAAeiB,OAAf,CAAuBC,IAAvB,EAA6B;AAC3B,WAAO,MAAM,IAAIC,QAAJ,CAAaD,IAAb,EAAmBP,IAAnB,EAAb;AACD;;AAED,iBAAeS,cAAf,GAAgC;AAC9BZ,IAAAA,SAAS,CAAC,cAAD,CAAT;;AACA,QAAI;AACF,YAAMa,SAAS,GAAGZ,MAAlB;AACA,YAAMa,WAAW,GAAGX,IAApB;AACA,YAAMY,OAAO,GAAG,EAAhB;AAEAF,MAAAA,SAAS,CAACG,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,CAAOC,aAAP,CAAqBF,CAAC,CAACC,IAAvB,CAAzB;AACAL,MAAAA,WAAW,CAACE,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,CAAOC,aAAP,CAAqBF,CAAC,CAACC,IAAvB,CAA3B;AAEA,YAAME,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIX,IAAT,IAAiBI,WAAjB,EAA8B;AAC5BC,QAAAA,OAAO,CAACO,IAAR,CAAa,MAAMb,OAAO,CAACC,IAAD,CAA1B;AACD;;AAED,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvCvB,QAAAA,SAAS,CAAE,eAAcuB,CAAC,GAAG,CAAE,OAAMR,OAAO,CAACS,MAAO,EAA3C,CAAT;AAEA,cAAMC,KAAK,GAAG,MAAMhC,gBAAgB,CAACsB,OAAO,CAACQ,CAAD,CAAR,EAAaV,SAAS,CAACU,CAAD,CAAtB,CAApC;AACAF,QAAAA,QAAQ,CAACC,IAAT,CAAcG,KAAK,CAACC,GAApB;AACD;;AACD1B,MAAAA,SAAS,CAAC,iBAAD,CAAT;AACA2B,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACAf,MAAAA,MAAM,CAAC,CAACe,QAAD,CAAD,CAAN;AACAb,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAvBD,CAuBE,OAAOqB,GAAP,EAAY;AACZ7B,MAAAA,SAAS,CAAE,UAAS6B,GAAI,EAAf,CAAT;AACD;AACF;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACf5B,QAAAA,SAAS,CAAC6B,KAAK,CAACC,IAAN,CAAWF,CAAC,CAACG,MAAF,CAASC,KAApB,CAAD,CAAT;AACD;AALH;AAAA;AAAA;AAAA;AAAA,YAHF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,QAAQ,EAAGJ,CAAD,IAAO;AACf1B,QAAAA,OAAO,CAAC2B,KAAK,CAACC,IAAN,CAAWF,CAAC,CAACG,MAAF,CAASC,KAApB,CAAD,CAAP;AACD;AALH;AAAA;AAAA;AAAA;AAAA,YAXF,eAkBE;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBE;AAAA;AAAA;AAAA;AAAA,YApBF,eAqBE;AAAA;AAAA;AAAA;AAAA,YArBF,eAsBE;AAAA;AAAA;AAAA;AAAA,YAtBF,eAuBE;AAAQ,MAAA,OAAO,EAAEtB,cAAjB;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBF,eA0BE;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE;AAAA;AAAA;AAAA;AAAA,YA3BF,EA4BGL,MAAM,iBAAI,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEF,GAAf;AAAoB,MAAA,MAAM,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5Bb,eA8BE;AAAK,MAAA,KAAK,EAAE;AAAE8B,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,GAAG,EAAE,MAA1B;AAAkCC,QAAAA,KAAK,EAAE;AAAzC,OAAZ;AAAA,gBACGtC;AADH;AAAA;AAAA;AAAA;AAAA,YA9BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiKD,CA1MD;;GAAMF,M;;KAAAA,M;AA4MN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { addJsonToStorage, addFileToStorage } from \"./addToStorage\";\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nconst Minter = (props) => {\n  const [status, setStatus] = useState(\"Status\");\n  const [images, setImages] = useState([]);\n  const [json, setJSON] = useState([]);\n  const [csv, setCSV] = useState([]);\n  const [gencsv, setGencsv] = useState(false);\n\n  async function getfile(file) {\n    return await new Response(file).json();\n  }\n\n  async function uploadMetadata() {\n    setStatus(\"Uploading...\");\n    try {\n      const imagesArr = images;\n      const jsonFileArr = json;\n      const jsonArr = [];\n\n      imagesArr.sort((a, b) => a.name.localeCompare(b.name));\n      jsonFileArr.sort((a, b) => a.name.localeCompare(b.name));\n\n      const jsonUrls = [];\n      for (var file of jsonFileArr) {\n        jsonArr.push(await getfile(file));\n      }\n\n      for (var i = 0; i < jsonArr.length; i++) {\n        setStatus(`Uploading...${i + 1} of ${jsonArr.length}`);\n\n        const added = await addJsonToStorage(jsonArr[i], imagesArr[i]);\n        jsonUrls.push(added.url);\n      }\n      setStatus(\"Upload complete\");\n      console.log(jsonUrls);\n      setCSV([jsonUrls]);\n      setGencsv(true);\n    } catch (err) {\n      setStatus(`Error: ${err}`);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Upload NFT Metadata</h1>\n      <h3> Select Images: </h3>\n      <input\n        type=\"file\"\n        multiple\n        onChange={(e) => {\n          setImages(Array.from(e.target.files));\n        }}\n      />\n      <h3> Select JSON files: </h3>\n      <input\n        type=\"file\"\n        multiple\n        onChange={(e) => {\n          setJSON(Array.from(e.target.files));\n        }}\n      />\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <button onClick={uploadMetadata}>\n        <b>Upload</b>\n      </button>\n      <br/>\n      <br/>\n      {gencsv && <CSVLink data={csv} target=\"_blank\">Download CSV</CSVLink>  }\n\n      <div style={{ position: \"fixed\", top: \"90vh\", color: \"green\" }}>\n        {status}\n      </div>\n\n      {/* <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Token Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Address\"\n                value={tokenAddress}\n                onChange={(event) => setTokenAddress(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Mint To : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Address\"\n                value={mintTo}\n                onChange={(event) => setMintTo(event.target.value)}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Images: </h3>\n              <input\n                type=\"file\"\n                multiple\n                onChange={(e) => {\n                  setImages(Array.from(e.target.files));\n                }}\n              />\n            </td>\n            <td>\n              <h3> JSON files: </h3>\n              <input\n                type=\"file\"\n                multiple\n                onChange={(e) => {\n                  setJSON(Array.from(e.target.files));\n                }}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={onMintPressed}>\n                <b>Mint NFT</b>\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <h3> CSV file: </h3>\n              <input\n                type=\"file\"\n                onChange={(e) => {\n                  setCSV(e.target.files[0]);\n                }}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={(e) => onMintCSV()}>\n                <b>Mint NFT from CSV</b>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <h2> Transfer : </h2>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <h3> Token Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Token Address\"\n                value={tokenAddress2}\n                onChange={(event) => setTokenAddress2(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Token Id : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"tokenID\"\n                value={tokenId}\n                onChange={(event) => setTokenId(event.target.value)}\n              />\n            </td>\n            <td>\n              <h3> Receiver Address : </h3>\n              <input\n                type=\"text\"\n                placeholder=\"Receiver Address\"\n                value={receiverAddress}\n                onChange={(event) => setReceiverAddress(event.target.value)}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={transferAsTokenOwner}>\n                Transfer as token owner\n              </button>\n            </td>\n            <td>\n              <button onClick={transferAsContractOwner}>\n                Transfer as contract owner\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p id=\"status\" style={{ color: \"limegreen\" }}>\n        {status}\n      </p> */}\n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}